require 'java'

require_relative '../jar/glycanbuilder2.jar'
require_relative '../jar/wurcsframework.jar'
require_relative '../jar/slf4j-api.jar'
require_relative "../jar/batik-all.jar"

java_import 'java.io.ByteArrayOutputStream'
java_import 'java.util.Base64'
java_import 'javax.imageio.ImageIO'
java_import 'org.eurocarbdb.application.glycanbuilder.BuilderWorkspace'
java_import 'org.eurocarbdb.application.glycanbuilder.massutil.MassOptions'
java_import 'org.eurocarbdb.application.glycanbuilder.renderutil.GlycanRendererAWT'
java_import 'org.eurocarbdb.application.glycanbuilder.util.GraphicOptions'
java_import 'org.glycoinfo.application.glycanbuilder.converterWURCS2.WURCS2Parser'

java_import 'org.eurocarbdb.application.glycanbuilder.renderutil.SVGUtils'

java_import 'java.util.LinkedList'

module GlycoBook
class GlycanBuilder
  def generatePng(w,scale)
    naki = ""        

      workspace = BuilderWorkspace.new(GlycanRendererAWT.new)
  workspace.initData()
  workspace.setNotation(GraphicOptions::NOTATION_SNFG)
  parser= WURCS2Parser.new
  begin
    glycan = parser.readGlycan(w, MassOptions.new)
    image = workspace.getGlycanRenderer().getImage(glycan, true, false, true,scale)
    stream = ByteArrayOutputStream.new
    ImageIO.write(image, "png", stream)
    base = Base64.getEncoder().encodeToString(stream.toByteArray())
    return base
    #return "<img src=\"data:image/png;base64,#{base}\">"
  rescue Exception, StackOverflowError => e
    return naki
  end

  end

  def generateSvg(wurcs)
    workspace = BuilderWorkspace.new(GlycanRendererAWT.new)
    workspace.init_data
    workspace.set_notation(GraphicOptions::NOTATION_SNFG)

    begin
      glycan = WURCS2Parser.new.read_glycan(wurcs, MassOptions.new)
      glycans = LinkedList.new
      glycans.add(glycan)

      SVGUtils.get_vector_graphics(workspace.get_glycan_renderer, glycans, false, true)
    rescue Exception, StackOverflowError => e
      return "<pre>#{e.to_s}</pre>"
    end
  end



  def showImage(w,format,scale)
    if format == "png"
    base = self.generatePng(w,scale)
    IRuby.html "<img src=\"data:image/png;base64,#{base}\">"
    elsif format == "svg"
        scale = 300 * scale
        IRuby.html self.generateSvg(w).sub(/\<svg /,"<svg width=\"#{scale.to_s}px\"")
    else
      IRuby.html "#{format} is not supported"
    end
  end
end
end
